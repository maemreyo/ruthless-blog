#!/usr/bin/env node

/**
 * Script ƒë·ªÉ t·∫°o m·ªôt series m·ªõi v·ªõi nhi·ªÅu b√†i vi·∫øt
 * S·ª≠ d·ª•ng: node scripts/create-series.js --name "T√™n Series" --locale vi --parts 3
 */

const fs = require('fs');
const path = require('path');
const { program } = require('commander');
const slugify = require('slugify');
const { execSync } = require('child_process');

// C·∫•u h√¨nh command line options
program
  .option('-n, --name <name>', 'T√™n series')
  .option('-l, --locale <locale>', 'Ng√¥n ng·ªØ (vi ho·∫∑c en)', 'vi')
  .option('-p, --parts <parts>', 'S·ªë l∆∞·ª£ng b√†i vi·∫øt trong series', '3') // Change default to string
  .option('-c, --category <category>', 'Category cho t·∫•t c·∫£ b√†i vi·∫øt trong series', 'Technology')
  .option('-a, --author <author>', 'T√°c gi·∫£', 'Wehttam')
  .option('-d, --draft', 'T·∫°o b√†i vi·∫øt ·ªü ch·∫ø ƒë·ªô nh√°p', false);

program.parse(process.argv);

const options = program.opts();
options.parts = parseInt(options.parts); // Parse parts to integer
console.log(`Debug: options.parts = ${options.parts}, type = ${typeof options.parts}`);

// Ki·ªÉm tra t√™n series
if (!options.name) {
  console.error('L·ªói: T√™n series l√† b·∫Øt bu·ªôc');
  program.help();
  process.exit(1);
}

// T·∫°o ng√†y hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng YYYY-MM-DD
const today = new Date();

// T·∫°o c√°c b√†i vi·∫øt trong series
for (let i = 1; i <= options.parts; i++) {
  // T·∫°o ng√†y cho b√†i vi·∫øt (m·ªói b√†i c√°ch nhau 1 ng√†y)
  const postDate = new Date(today);
  postDate.setDate(today.getDate() + i - 1);
  const dateString = postDate.toISOString().split('T')[0];
  
  // T·∫°o ti√™u ƒë·ªÅ cho b√†i vi·∫øt
  const postTitle = `${options.name} - Ph·∫ßn ${i}`;
  
  // T·∫°o m√¥ t·∫£ cho b√†i vi·∫øt
  let excerpt;
  if (i === 1) {
    excerpt = `Gi·ªõi thi·ªáu v·ªÅ series ${options.name} v√† c√°c ki·∫øn th·ª©c c∆° b·∫£n.`;
  } else if (i === options.parts) {
    excerpt = `Ph·∫ßn cu·ªëi c√πng c·ªßa series ${options.name} v·ªõi c√°c k·ªπ thu·∫≠t n√¢ng cao.`;
  } else {
    excerpt = `Ph·∫ßn ${i} c·ªßa series ${options.name} v·ªõi c√°c k·ªπ thu·∫≠t v√† v√≠ d·ª• th·ª±c t·∫ø.`;
  }
  
  // T·∫°o l·ªánh ƒë·ªÉ t·∫°o b√†i vi·∫øt
  let command = `node scripts/create-post.js --title "${postTitle}" --locale ${options.locale} --category "${options.category}" --series "${options.name}" --series-part ${i} --excerpt "${excerpt}" --author "${options.author}"`;
  
  if (options.draft) {
    command += ' --draft';
  }
  
  // Th·ª±c thi l·ªánh t·∫°o b√†i vi·∫øt
  try {
    execSync(command, { stdio: 'inherit' });
  } catch (error) {
    console.error(`L·ªói khi t·∫°o b√†i vi·∫øt ph·∫ßn ${i}:`, error.message);
  }
}

console.log(`\n‚úÖ ƒê√£ t·∫°o series "${options.name}" v·ªõi ${options.parts} b√†i vi·∫øt`);
console.log('üîó B·∫°n c√≥ th·ªÉ xem series n√†y t·∫°i:');
console.log(`   /series/${encodeURIComponent(options.name)}`);

// Hi·ªÉn th·ªã g·ª£i √Ω c√°c l·ªánh h·ªØu √≠ch
console.log('\nüìù C√°c l·ªánh h·ªØu √≠ch:');
console.log(`- Li·ªát k√™ t·∫•t c·∫£ b√†i vi·∫øt trong series: node scripts/list-posts.js --series "${options.name}"`);
console.log(`- Li·ªát k√™ t·∫•t c·∫£ series: node scripts/list-posts.js --sort series`);