#!/usr/bin/env node

/**
 * Script ƒë·ªÉ upload ·∫£nh l√™n repository h√¨nh ·∫£nh v√† t·∫°o URL jsDelivr
 * S·ª≠ d·ª•ng: node scripts/upload-images.js --image path/to/image.jpg --folder posts/2023/05
 */

const fs = require('fs');
const path = require('path');
const { program } = require('commander');
const { execSync } = require('child_process');
const crypto = require('crypto');

// C·∫•u h√¨nh repository h√¨nh ·∫£nh
const IMAGE_REPO_URL = 'git@github.com:maemreyo/wehttam-blog-images.git';
const IMAGE_REPO_NAME = 'wehttam-blog-images';
const IMAGE_REPO_BRANCH = 'main';
const JSDELIVR_BASE_URL = `https://cdn.jsdelivr.net/gh/maemreyo/${IMAGE_REPO_NAME}@${IMAGE_REPO_BRANCH}`;

// C·∫•u h√¨nh command line options
program
  .option('-i, --image <path>', 'ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh c·∫ßn upload')
  .option('-d, --directory <directory>', 'ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a nhi·ªÅu ·∫£nh')
  .option('-f, --folder <folder>', 'Th∆∞ m·ª•c ƒë√≠ch trong repository h√¨nh ·∫£nh (n·∫øu kh√¥ng gi·ªØ c·∫•u tr√∫c)', 'uploads')
  .option('-m, --message <message>', 'Commit message', 'Add new images')
  .option('-c, --copy', 'T·ª± ƒë·ªông copy URL v√†o clipboard', false)
  .option('-p, --prefix <prefix>', 'Ti·ªÅn t·ªë cho t√™n file', '')
  .option('--optimize', 'T·ªëi ∆∞u h√≥a ·∫£nh tr∆∞·ªõc khi upload', false)
  .option('--preserve-structure', 'Gi·ªØ nguy√™n c·∫•u tr√∫c th∆∞ m·ª•c trong th∆∞ m·ª•c ƒë√≠ch', false);

program.parse(process.argv);

const options = program.opts();

// Ki·ªÉm tra xem c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh kh√¥ng
if (!options.image && !options.directory) {
  console.error('L·ªói: B·∫°n ph·∫£i ch·ªâ ƒë·ªãnh ·∫£nh (--image) ho·∫∑c th∆∞ m·ª•c ch·ª©a ·∫£nh (--directory)');
  program.help();
  process.exit(1);
}

// T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ clone repository
const tempDir = path.join(process.cwd(), '.temp-image-repo');

// H√†m ƒë·ªÉ t·∫°o t√™n file ng·∫´u nhi√™n n·∫øu c·∫ßn
function generateRandomFileName(originalName) {
  const ext = path.extname(originalName);
  const baseName = path.basename(originalName, ext);
  const timestamp = Date.now();
  const randomString = crypto.randomBytes(4).toString('hex');
  
  if (options.prefix) {
    return `${options.prefix}-${baseName}-${timestamp}-${randomString}${ext}`;
  }
  
  return `${baseName}-${timestamp}-${randomString}${ext}`;
}

// H√†m ƒë·ªÉ t·ªëi ∆∞u h√≥a ·∫£nh (c·∫ßn c√†i ƒë·∫∑t sharp)
function optimizeImage(imagePath) {
  try {
    // Ki·ªÉm tra xem sharp ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
    require.resolve('sharp');
    
    const sharp = require('sharp');
    const optimizedPath = imagePath + '.optimized';
    
    // T·ªëi ∆∞u h√≥a ·∫£nh v·ªõi sharp
    sharp(imagePath)
      .resize(1920, 1080, { fit: 'inside', withoutEnlargement: true })
      .jpeg({ quality: 80, progressive: true })
      .toFile(optimizedPath)
      .then(() => {
        fs.renameSync(optimizedPath, imagePath);
        console.log(`‚úÖ ƒê√£ t·ªëi ∆∞u h√≥a ·∫£nh: ${imagePath}`);
      })
      .catch(err => {
        console.error(`‚ùå L·ªói khi t·ªëi ∆∞u h√≥a ·∫£nh: ${err.message}`);
      });
  } catch (error) {
    console.warn('‚ö†Ô∏è Th∆∞ vi·ªán sharp ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua b∆∞·ªõc t·ªëi ∆∞u h√≥a ·∫£nh.');
    console.warn('   C√†i ƒë·∫∑t sharp: npm install sharp --save-dev');
  }
}

// H√†m ƒë·ªÉ upload m·ªôt ·∫£nh
function uploadImage(imagePath, destFolder) {
  try {
    // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(imagePath)) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file: ${imagePath}`);
      return null;
    }
    
    // T·∫°o t√™n file m·ªõi n·∫øu c·∫ßn
    const fileName = options.prefix ? generateRandomFileName(path.basename(imagePath)) : path.basename(imagePath);
    
    // T·ªëi ∆∞u h√≥a ·∫£nh n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (options.optimize) {
      optimizeImage(imagePath);
    }
    
    let finalDestFolder = destFolder;
    let destFilePath;
    
    // N·∫øu gi·ªØ c·∫•u tr√∫c th∆∞ m·ª•c v√† ƒë∆∞·ªùng d·∫´n c√≥ ch·ª©a c·∫•u tr√∫c th∆∞ m·ª•c
    if (options.preserveStructure) {
      // L·∫•y ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ th∆∞ m·ª•c g·ªëc
      const relativePath = path.relative(options.directory, path.dirname(imagePath));
      
      if (relativePath && relativePath !== '.') {
        // N·∫øu ·∫£nh n·∫±m trong th∆∞ m·ª•c con, s·ª≠ d·ª•ng c·∫•u tr√∫c th∆∞ m·ª•c ƒë√≥
        finalDestFolder = relativePath.replace(/\\/g, '/');
      }
      
      // T·∫°o th∆∞ m·ª•c ƒë√≠ch trong repository
      const destPath = path.join(tempDir, finalDestFolder);
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath, { recursive: true });
      }
      
      // Copy ·∫£nh v√†o repository
      destFilePath = path.join(destPath, fileName);
    } else {
      // T·∫°o th∆∞ m·ª•c ƒë√≠ch trong repository
      const destPath = path.join(tempDir, destFolder);
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath, { recursive: true });
      }
      
      // Copy ·∫£nh v√†o repository
      destFilePath = path.join(destPath, fileName);
    }
    
    // Copy ·∫£nh v√†o repository
    fs.copyFileSync(imagePath, destFilePath);
    
    // T·∫°o URL jsDelivr
    const relativePath = path.join(finalDestFolder, fileName).replace(/\\/g, '/');
    const jsdelivrUrl = `${JSDELIVR_BASE_URL}/${relativePath}`;
    
    return {
      fileName,
      relativePath,
      jsdelivrUrl,
      markdownLink: `![${path.basename(fileName, path.extname(fileName))}](${jsdelivrUrl})`
    };
  } catch (error) {
    console.error(`‚ùå L·ªói khi upload ·∫£nh ${imagePath}: ${error.message}`);
    return null;
  }
}

// H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán upload
async function main() {
  try {
    // X√≥a th∆∞ m·ª•c t·∫°m n·∫øu ƒë√£ t·ªìn t·∫°i
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    // Clone repository h√¨nh ·∫£nh
    console.log(`üîÑ ƒêang clone repository ${IMAGE_REPO_URL}...`);
    execSync(`git clone ${IMAGE_REPO_URL} ${tempDir}`, { stdio: 'inherit' });
    
    // Danh s√°ch k·∫øt qu·∫£
    const results = [];
    
    // Upload m·ªôt ·∫£nh ho·∫∑c nhi·ªÅu ·∫£nh
    if (options.image) {
      // Upload m·ªôt ·∫£nh
      const result = uploadImage(options.image, options.folder);
      if (result) {
        results.push(result);
      }
    } else if (options.directory) {
      // Upload nhi·ªÅu ·∫£nh t·ª´ th∆∞ m·ª•c
      const dirPath = options.directory;
      if (!fs.existsSync(dirPath)) {
        console.error(`‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: ${dirPath}`);
        process.exit(1);
      }
      
      const files = fs.readdirSync(dirPath)
        .filter(file => /\.(jpg|jpeg|png|gif|webp|svg)$/i.test(file));
      
      if (files.length === 0) {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c.');
        process.exit(0);
      }
      
      console.log(`üîç T√¨m th·∫•y ${files.length} ·∫£nh trong th∆∞ m·ª•c.`);
      
      for (const file of files) {
        const filePath = path.join(dirPath, file);
        const result = uploadImage(filePath, options.folder);
        if (result) {
          results.push(result);
        }
      }
    }
    
    // N·∫øu kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c upload th√†nh c√¥ng
    if (results.length === 0) {
      console.error('‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c upload th√†nh c√¥ng.');
      process.exit(1);
    }
    
    // Commit v√† push thay ƒë·ªïi
    console.log(`üîÑ ƒêang commit v√† push thay ƒë·ªïi...`);
    process.chdir(tempDir);
    execSync('git add .', { stdio: 'inherit' });
    execSync(`git commit -m "${options.message}"`, { stdio: 'inherit' });
    execSync(`git push origin ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    console.log('\n‚úÖ Upload th√†nh c√¥ng!');
    console.log('\nüìã Danh s√°ch URL:');
    
    results.forEach((result, index) => {
      console.log(`\n${index + 1}. ${result.fileName}:`);
      console.log(`   URL: ${result.jsdelivrUrl}`);
      console.log(`   Markdown: ${result.markdownLink}`);
      
      // Copy URL v√†o clipboard n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
      if (options.copy && index === 0) {
        try {
          const clipboardy = require('clipboardy');
          clipboardy.writeSync(result.markdownLink);
          console.log('   ‚úÖ ƒê√£ copy Markdown link v√†o clipboard!');
        } catch (error) {
          console.warn('   ‚ö†Ô∏è Kh√¥ng th·ªÉ copy v√†o clipboard. C√†i ƒë·∫∑t clipboardy: npm install clipboardy --save-dev');
        }
      }
    });
    
    // X√≥a th∆∞ m·ª•c t·∫°m
    process.chdir(process.cwd());
    fs.rmSync(tempDir, { recursive: true, force: true });
    
  } catch (error) {
    console.error(`‚ùå L·ªói: ${error.message}`);
    
    // X√≥a th∆∞ m·ª•c t·∫°m n·∫øu c√≥ l·ªói
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    process.exit(1);
  }
}

// Ch·∫°y h√†m ch√≠nh
main();