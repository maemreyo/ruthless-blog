#!/usr/bin/env node

/**
 * Script ƒë·ªÉ upload ·∫£nh l√™n repository h√¨nh ·∫£nh v√† t·∫°o URL jsDelivr
 * S·ª≠ d·ª•ng: node scripts/upload-images.js --image path/to/image.jpg --folder posts/2023/05
 */

const fs = require('fs');
const path = require('path');
const { program } = require('commander');
const { execSync } = require('child_process');
const crypto = require('crypto');

// C·∫•u h√¨nh repository h√¨nh ·∫£nh
const IMAGE_REPO_URL = 'git@github.com:maemreyo/wehttam-blog-images.git';
const IMAGE_REPO_NAME = 'wehttam-blog-images';
const IMAGE_REPO_BRANCH = 'main';
const GITHUB_USERNAME = 'maemreyo';

// URL cho c√°c d·ªãch v·ª• kh√°c nhau
// jsDelivr c√≥ nhi·ªÅu c√°ch ƒë·ªãnh d·∫°ng URL:
// 1. S·ª≠ d·ª•ng tag/release: https://cdn.jsdelivr.net/gh/user/repo@tag/file
// 2. S·ª≠ d·ª•ng commit: https://cdn.jsdelivr.net/gh/user/repo@hash/file
// 3. S·ª≠ d·ª•ng branch: https://cdn.jsdelivr.net/gh/user/repo@branch/file (kh√¥ng khuy·∫øn ngh·ªã cho production)
// 4. Kh√¥ng ch·ªâ ƒë·ªãnh version: https://cdn.jsdelivr.net/gh/user/repo/file (lu√¥n l·∫•y t·ª´ master/main)
const JSDELIVR_BASE_URL = `https://cdn.jsdelivr.net/gh/${GITHUB_USERNAME}/${IMAGE_REPO_NAME}`;
const JSDELIVR_VERSIONED_URL = `${JSDELIVR_BASE_URL}@${IMAGE_REPO_BRANCH}`;
const GITHUB_RAW_URL = `https://raw.githubusercontent.com/${GITHUB_USERNAME}/${IMAGE_REPO_NAME}/${IMAGE_REPO_BRANCH}`;
const GITHUB_BLOB_URL = `https://github.com/${GITHUB_USERNAME}/${IMAGE_REPO_NAME}/blob/${IMAGE_REPO_BRANCH}`;

// C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
const DEFAULT_IMAGE_SERVICE = 'jsdelivr-latest'; // 'jsdelivr-latest', 'jsdelivr-versioned', 'github-raw', 'github-blob'

// C·∫•u h√¨nh command line options
program
  .option('-i, --image <path>', 'ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh c·∫ßn upload')
  .option('-d, --directory <directory>', 'ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a nhi·ªÅu ·∫£nh')
  .option('-f, --folder <folder>', 'Th∆∞ m·ª•c ƒë√≠ch trong repository h√¨nh ·∫£nh (n·∫øu kh√¥ng gi·ªØ c·∫•u tr√∫c)', 'uploads')
  .option('-m, --message <message>', 'Commit message', 'Add new images')
  .option('-c, --copy', 'T·ª± ƒë·ªông copy URL v√†o clipboard', false)
  .option('-p, --prefix <prefix>', 'Ti·ªÅn t·ªë cho t√™n file', '')
  .option('--optimize', 'T·ªëi ∆∞u h√≥a ·∫£nh tr∆∞·ªõc khi upload', false)
  .option('--preserve-structure', 'Gi·ªØ nguy√™n c·∫•u tr√∫c th∆∞ m·ª•c trong th∆∞ m·ª•c ƒë√≠ch', false)
  .option('--service <service>', 'D·ªãch v·ª• URL h√¨nh ·∫£nh (jsdelivr, github-raw, github-blob)', DEFAULT_IMAGE_SERVICE)
  .option('--force-git', 'Force push l√™n Git repository n·∫øu c·∫ßn', false)
  .option('--check-repo', 'Ki·ªÉm tra xem repository c√≥ ph·∫£i l√† public kh√¥ng', false);

program.parse(process.argv);

const options = program.opts();

// Ki·ªÉm tra xem c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh kh√¥ng
if (!options.image && !options.directory) {
  console.error('L·ªói: B·∫°n ph·∫£i ch·ªâ ƒë·ªãnh ·∫£nh (--image) ho·∫∑c th∆∞ m·ª•c ch·ª©a ·∫£nh (--directory)');
  program.help();
  process.exit(1);
}

// T·∫°o th∆∞ m·ª•c t·∫°m ƒë·ªÉ clone repository
const tempDir = path.join(process.cwd(), '.temp-image-repo');

// H√†m ƒë·ªÉ t·∫°o t√™n file ng·∫´u nhi√™n n·∫øu c·∫ßn
function generateRandomFileName(originalName) {
  const ext = path.extname(originalName);
  const baseName = path.basename(originalName, ext);
  const timestamp = Date.now();
  const randomString = crypto.randomBytes(4).toString('hex');
  
  if (options.prefix) {
    return `${options.prefix}-${baseName}-${timestamp}-${randomString}${ext}`;
  }
  
  return `${baseName}-${timestamp}-${randomString}${ext}`;
}

// H√†m ƒë·ªÉ t·ªëi ∆∞u h√≥a ·∫£nh (c·∫ßn c√†i ƒë·∫∑t sharp)
function optimizeImage(imagePath) {
  try {
    // Ki·ªÉm tra xem sharp ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
    require.resolve('sharp');
    
    const sharp = require('sharp');
    const optimizedPath = imagePath + '.optimized';
    
    // T·ªëi ∆∞u h√≥a ·∫£nh v·ªõi sharp
    sharp(imagePath)
      .resize(1920, 1080, { fit: 'inside', withoutEnlargement: true })
      .jpeg({ quality: 80, progressive: true })
      .toFile(optimizedPath)
      .then(() => {
        fs.renameSync(optimizedPath, imagePath);
        console.log(`‚úÖ ƒê√£ t·ªëi ∆∞u h√≥a ·∫£nh: ${imagePath}`);
      })
      .catch(err => {
        console.error(`‚ùå L·ªói khi t·ªëi ∆∞u h√≥a ·∫£nh: ${err.message}`);
      });
  } catch (error) {
    console.warn('‚ö†Ô∏è Th∆∞ vi·ªán sharp ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua b∆∞·ªõc t·ªëi ∆∞u h√≥a ·∫£nh.');
    console.warn('   C√†i ƒë·∫∑t sharp: npm install sharp --save-dev');
  }
}

// H√†m ƒë·ªÉ upload m·ªôt ·∫£nh
function uploadImage(imagePath, destFolder) {
  try {
    // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(imagePath)) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file: ${imagePath}`);
      return null;
    }
    
    // T·∫°o t√™n file m·ªõi n·∫øu c·∫ßn
    const fileName = options.prefix ? generateRandomFileName(path.basename(imagePath)) : path.basename(imagePath);
    
    // T·ªëi ∆∞u h√≥a ·∫£nh n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (options.optimize) {
      optimizeImage(imagePath);
    }
    
    let finalDestFolder = destFolder;
    let destFilePath;
    
    // N·∫øu gi·ªØ c·∫•u tr√∫c th∆∞ m·ª•c v√† ƒë∆∞·ªùng d·∫´n c√≥ ch·ª©a c·∫•u tr√∫c th∆∞ m·ª•c
    if (options.preserveStructure) {
      // L·∫•y ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ th∆∞ m·ª•c g·ªëc
      const relativePath = path.relative(options.directory, path.dirname(imagePath));
      
      if (relativePath && relativePath !== '.') {
        // N·∫øu ·∫£nh n·∫±m trong th∆∞ m·ª•c con, s·ª≠ d·ª•ng c·∫•u tr√∫c th∆∞ m·ª•c ƒë√≥
        finalDestFolder = relativePath.replace(/\\/g, '/');
      }
      
      // T·∫°o th∆∞ m·ª•c ƒë√≠ch trong repository
      const destPath = path.join(tempDir, finalDestFolder);
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath, { recursive: true });
      }
      
      // Copy ·∫£nh v√†o repository
      destFilePath = path.join(destPath, fileName);
    } else {
      // T·∫°o th∆∞ m·ª•c ƒë√≠ch trong repository
      const destPath = path.join(tempDir, destFolder);
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath, { recursive: true });
      }
      
      // Copy ·∫£nh v√†o repository
      destFilePath = path.join(destPath, fileName);
    }
    
    // Copy ·∫£nh v√†o repository
    fs.copyFileSync(imagePath, destFilePath);
    
    // T·∫°o URL cho ·∫£nh
    const relativePath = path.join(finalDestFolder, fileName).replace(/\\/g, '/');
    const jsdelivrLatestUrl = `${JSDELIVR_BASE_URL}/${relativePath}`;
    const jsdelivrVersionedUrl = `${JSDELIVR_VERSIONED_URL}/${relativePath}`;
    const githubRawUrl = `${GITHUB_RAW_URL}/${relativePath}`;
    const githubBlobUrl = `${GITHUB_BLOB_URL}/${relativePath}`;
    
    // X√°c ƒë·ªãnh URL d·ª±a tr√™n service ƒë∆∞·ª£c ch·ªçn
    let imageUrl;
    switch (options.service.toLowerCase()) {
      case 'github-raw':
        imageUrl = githubRawUrl;
        break;
      case 'github-blob':
        imageUrl = githubBlobUrl;
        break;
      case 'jsdelivr-versioned':
        imageUrl = jsdelivrVersionedUrl;
        break;
      case 'jsdelivr-latest':
      case 'jsdelivr':
      default:
        imageUrl = jsdelivrLatestUrl;
        break;
    }
    
    return {
      fileName,
      relativePath,
      jsdelivrLatestUrl,
      jsdelivrVersionedUrl,
      githubRawUrl,
      githubBlobUrl,
      imageUrl,
      selectedService: options.service,
      markdownLink: `![${path.basename(fileName, path.extname(fileName))}](${imageUrl})`
    };
  } catch (error) {
    console.error(`‚ùå L·ªói khi upload ·∫£nh ${imagePath}: ${error.message}`);
    return null;
  }
}

// H√†m ƒë·ªÉ ki·ªÉm tra xem repository c√≥ ph·∫£i l√† public kh√¥ng
async function checkRepositoryVisibility() {
  try {
    // S·ª≠ d·ª•ng GitHub API ƒë·ªÉ ki·ªÉm tra
    const { execSync } = require('child_process');
    const repoApiUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${IMAGE_REPO_NAME}`;
    
    console.log(`üîç ƒêang ki·ªÉm tra tr·∫°ng th√°i repository...`);
    
    // S·ª≠ d·ª•ng curl ƒë·ªÉ g·ªçi GitHub API
    const result = execSync(`curl -s ${repoApiUrl}`, { encoding: 'utf8' });
    const repoInfo = JSON.parse(result);
    
    if (repoInfo.private === true) {
      console.warn(`‚ö†Ô∏è Repository ${IMAGE_REPO_NAME} l√† private.`);
      
      if (options.service === 'jsdelivr') {
        console.warn(`‚ö†Ô∏è jsDelivr c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông v·ªõi private repository.`);
        console.warn(`   B·∫°n n√™n chuy·ªÉn repository sang public ho·∫∑c s·ª≠ d·ª•ng service kh√°c.`);
        
        // H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
        const readline = require('readline').createInterface({
          input: process.stdin,
          output: process.stdout
        });
        
        return new Promise((resolve) => {
          readline.question('B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N): ', (answer) => {
            readline.close();
            if (answer.toLowerCase() !== 'y') {
              console.log('‚ùå ƒê√£ h·ªßy upload.');
              process.exit(0);
            }
            resolve();
          });
        });
      }
    } else {
      console.log(`‚úÖ Repository ${IMAGE_REPO_NAME} l√† public, ph√π h·ª£p v·ªõi jsDelivr.`);
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i repository: ${error.message}`);
    console.warn(`   Ti·∫øp t·ª•c m√† kh√¥ng ki·ªÉm tra...`);
  }
}

// H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán upload
async function main() {
  try {
    // Ki·ªÉm tra repository n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (options.checkRepo) {
      await checkRepositoryVisibility();
    }
    
    // X√≥a th∆∞ m·ª•c t·∫°m n·∫øu ƒë√£ t·ªìn t·∫°i
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    // Clone repository h√¨nh ·∫£nh
    console.log(`üîÑ ƒêang clone repository ${IMAGE_REPO_URL}...`);
    try {
      execSync(`git clone ${IMAGE_REPO_URL} ${tempDir}`, { stdio: 'inherit' });
      
      // Ki·ªÉm tra xem repository c√≥ tr·ªëng kh√¥ng
      const isEmptyRepo = fs.readdirSync(tempDir).filter(item => item !== '.git').length === 0;
      
      if (isEmptyRepo) {
        console.log('‚ÑπÔ∏è Repository tr·ªëng, ƒëang kh·ªüi t·∫°o...');
        
        // T·∫°o file README.md
        fs.writeFileSync(path.join(tempDir, 'README.md'), 
          `# ${IMAGE_REPO_NAME}\n\nRepository l∆∞u tr·ªØ h√¨nh ·∫£nh cho blog.\n`);
        
        // T·∫°o th∆∞ m·ª•c uploads
        fs.mkdirSync(path.join(tempDir, 'uploads'), { recursive: true });
        
        // Commit file README.md
        process.chdir(tempDir);
        execSync('git add README.md', { stdio: 'inherit' });
        execSync('git commit -m "Initial commit"', { stdio: 'inherit' });
        
        // Ki·ªÉm tra xem nh√°nh ƒë√£ t·ªìn t·∫°i ch∆∞a
        const branches = execSync('git branch -a', { encoding: 'utf8' });
        const hasBranch = branches.includes(`remotes/origin/${IMAGE_REPO_BRANCH}`);
        
        if (!hasBranch) {
          // T·∫°o nh√°nh m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
          console.log(`‚ÑπÔ∏è ƒêang t·∫°o nh√°nh ${IMAGE_REPO_BRANCH}...`);
          execSync(`git checkout -b ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
        }
        
        execSync(`git push -u origin ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
        process.chdir(process.cwd());
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi clone repository: ${error.message}`);
      console.log('‚ÑπÔ∏è ƒê·∫£m b·∫£o b·∫°n ƒë√£ thi·∫øt l·∫≠p SSH key v√† c√≥ quy·ªÅn truy c·∫≠p v√†o repository.');
      process.exit(1);
    }
    
    // Danh s√°ch k·∫øt qu·∫£
    const results = [];
    
    // Upload m·ªôt ·∫£nh ho·∫∑c nhi·ªÅu ·∫£nh
    if (options.image) {
      // Upload m·ªôt ·∫£nh
      const result = uploadImage(options.image, options.folder);
      if (result) {
        results.push(result);
      }
    } else if (options.directory) {
      // Upload nhi·ªÅu ·∫£nh t·ª´ th∆∞ m·ª•c
      const dirPath = options.directory;
      if (!fs.existsSync(dirPath)) {
        console.error(`‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: ${dirPath}`);
        process.exit(1);
      }
      
      // H√†m ƒë·ªá quy ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c file ·∫£nh trong th∆∞ m·ª•c v√† c√°c th∆∞ m·ª•c con
      function findAllImages(dir) {
        let results = [];
        const items = fs.readdirSync(dir);
        
        for (const item of items) {
          const itemPath = path.join(dir, item);
          const stat = fs.statSync(itemPath);
          
          if (stat.isDirectory()) {
            // ƒê·ªá quy v√†o th∆∞ m·ª•c con
            results = results.concat(findAllImages(itemPath));
          } else if (/\.(jpg|jpeg|png|gif|webp|svg)$/i.test(item)) {
            // Th√™m file ·∫£nh v√†o k·∫øt qu·∫£
            results.push(itemPath);
          }
        }
        
        return results;
      }
      
      // T√¨m t·∫•t c·∫£ c√°c file ·∫£nh trong th∆∞ m·ª•c v√† c√°c th∆∞ m·ª•c con
      const imageFiles = findAllImages(dirPath);
      
      if (imageFiles.length === 0) {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c.');
        process.exit(0);
      }
      
      console.log(`üîç T√¨m th·∫•y ${imageFiles.length} ·∫£nh trong th∆∞ m·ª•c.`);
      
      for (const filePath of imageFiles) {
        // X√°c ƒë·ªãnh th∆∞ m·ª•c ƒë√≠ch d·ª±a tr√™n c·∫•u tr√∫c th∆∞ m·ª•c g·ªëc
        const relativePath = path.relative(dirPath, path.dirname(filePath));
        const destFolder = options.preserveStructure && relativePath !== '' 
          ? path.join(options.folder, relativePath).replace(/\\/g, '/') 
          : options.folder;
          
        const result = uploadImage(filePath, destFolder);
        if (result) {
          results.push(result);
        }
      }
    }
    
    // N·∫øu kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c upload th√†nh c√¥ng
    if (results.length === 0) {
      console.error('‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c upload th√†nh c√¥ng.');
      process.exit(1);
    }
    
    // Commit v√† push thay ƒë·ªïi
    console.log(`üîÑ ƒêang commit v√† push thay ƒë·ªïi...`);
    process.chdir(tempDir);
    
    // Ki·ªÉm tra xem c√≥ thay ƒë·ªïi n√†o kh√¥ng
    const status = execSync('git status --porcelain', { encoding: 'utf8' });
    
    if (status.trim() === '') {
      console.log('‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ commit.');
    } else {
      execSync('git add .', { stdio: 'inherit' });
      execSync(`git commit -m "${options.message}"`, { stdio: 'inherit' });
      
      // Ki·ªÉm tra xem nh√°nh hi·ªán t·∫°i l√† g√¨
      const currentBranch = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf8' }).trim();
      
      // Ki·ªÉm tra xem nh√°nh ƒë√£ t·ªìn t·∫°i tr√™n remote ch∆∞a
      try {
        const remoteBranches = execSync('git branch -r', { encoding: 'utf8' });
        const hasRemoteBranch = remoteBranches.includes(`origin/${IMAGE_REPO_BRANCH}`);
        
        if (currentBranch !== IMAGE_REPO_BRANCH) {
          if (hasRemoteBranch) {
            // N·∫øu nh√°nh ƒë√£ t·ªìn t·∫°i tr√™n remote, checkout v√† pull
            console.log(`‚ÑπÔ∏è ƒêang chuy·ªÉn sang nh√°nh ${IMAGE_REPO_BRANCH}...`);
            execSync(`git checkout ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
            console.log(`‚ÑπÔ∏è ƒêang pull c√°c thay ƒë·ªïi m·ªõi nh·∫•t...`);
            execSync(`git pull origin ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
          } else {
            // N·∫øu nh√°nh ch∆∞a t·ªìn t·∫°i tr√™n remote, t·∫°o m·ªõi
            console.log(`‚ÑπÔ∏è ƒêang t·∫°o nh√°nh m·ªõi ${IMAGE_REPO_BRANCH}...`);
            execSync(`git checkout -b ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
          }
        } else if (hasRemoteBranch) {
          // N·∫øu ƒëang ·ªü ƒë√∫ng nh√°nh v√† nh√°nh ƒë√£ t·ªìn t·∫°i tr√™n remote, pull
          console.log(`‚ÑπÔ∏è ƒêang pull c√°c thay ƒë·ªïi m·ªõi nh·∫•t...`);
          try {
            execSync(`git pull origin ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
          } catch (pullError) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ pull t·ª´ remote: ${pullError.message}`);
            console.log(`‚ÑπÔ∏è Th·ª≠ pull v·ªõi --allow-unrelated-histories...`);
            execSync(`git pull --allow-unrelated-histories origin ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
          }
        }
        
        // Push l√™n remote
        console.log(`‚ÑπÔ∏è ƒêang push l√™n remote...`);
        try {
          execSync(`git push -u origin ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
        } catch (pushError) {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ push l√™n remote: ${pushError.message}`);
          
          // Ki·ªÉm tra xem c√≥ t√πy ch·ªçn force push kh√¥ng
          if (options.forceGit) {
            console.log(`‚ÑπÔ∏è ƒêang th·ª±c hi·ªán force push theo y√™u c·∫ßu...`);
            execSync(`git push -f -u origin ${IMAGE_REPO_BRANCH}`, { stdio: 'inherit' });
          } else {
            console.error(`‚ùå Push th·∫•t b·∫°i. Th·ª≠ l·∫°i v·ªõi t√πy ch·ªçn --force-git ƒë·ªÉ force push.`);
            console.error(`   L∆∞u √Ω: Force push c√≥ th·ªÉ g√¢y m·∫•t d·ªØ li·ªáu tr√™n remote.`);
            process.exit(1);
          }
        }
      } catch (error) {
        console.error(`‚ùå L·ªói khi l√†m vi·ªác v·ªõi Git: ${error.message}`);
        process.exit(1);
      }
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    console.log('\n‚úÖ Upload th√†nh c√¥ng!');
    console.log('\nüìã Danh s√°ch URL:');
    
    results.forEach((result, index) => {
      console.log(`\n${index + 1}. ${result.fileName}:`);
      console.log(`   jsDelivr Latest URL: ${result.jsdelivrLatestUrl}`);
      console.log(`   jsDelivr Versioned URL: ${result.jsdelivrVersionedUrl}`);
      console.log(`   GitHub Raw URL: ${result.githubRawUrl}`);
      console.log(`   GitHub Blob URL: ${result.githubBlobUrl}`);
      console.log(`   ƒêang s·ª≠ d·ª•ng: ${result.selectedService} (${result.imageUrl})`);
      console.log(`   Markdown: ${result.markdownLink}`);
      
      // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ jsDelivr
      if (result.selectedService.includes('jsdelivr')) {
        console.log('   ‚ÑπÔ∏è L∆∞u √Ω v·ªÅ jsDelivr:');
        console.log('      - C√≥ th·ªÉ m·∫•t v√†i ph√∫t ƒë·ªÉ jsDelivr c·∫≠p nh·∫≠t cache sau khi push');
        console.log('      - N·∫øu g·∫∑p l·ªói "Failed to fetch version info", h√£y th·ª≠ l·∫°i sau ho·∫∑c s·ª≠ d·ª•ng GitHub Raw URL');
        console.log('      - ƒê·∫£m b·∫£o repository l√† public ƒë·ªÉ jsDelivr ho·∫°t ƒë·ªông');
      }
      
      // Copy URL v√†o clipboard n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
      if (options.copy && index === 0) {
        try {
          const clipboardy = require('clipboardy');
          clipboardy.writeSync(result.markdownLink);
          console.log('   ‚úÖ ƒê√£ copy Markdown link v√†o clipboard!');
        } catch (error) {
          console.warn('   ‚ö†Ô∏è Kh√¥ng th·ªÉ copy v√†o clipboard. C√†i ƒë·∫∑t clipboardy: npm install clipboardy --save-dev');
        }
      }
    });
    
    // X√≥a th∆∞ m·ª•c t·∫°m
    process.chdir(process.cwd());
    fs.rmSync(tempDir, { recursive: true, force: true });
    
  } catch (error) {
    console.error(`‚ùå L·ªói: ${error.message}`);
    
    // X√≥a th∆∞ m·ª•c t·∫°m n·∫øu c√≥ l·ªói
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    process.exit(1);
  }
}

// Ch·∫°y h√†m ch√≠nh
main();